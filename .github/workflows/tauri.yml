name: Build and Deploy Binaries

on:
    workflow_dispatch:
    push:
        branches:
            - release

jobs:
    publish-tauri:
        permissions:
            contents: write
        strategy:
            fail-fast: false
            matrix:
                include:
                    - platform: "macos-latest"
                      args: "--target universal-apple-darwin"
                    - platform: "ubuntu-22.04"
                      args: "" # Linux
                    - platform: "windows-latest"
                      args: "" # Windows

        runs-on: ${{ matrix.platform }}

        steps:
            # Checkout repository
            - uses: actions/checkout@v4

            # Install system dependencies for Linux
            - name: Install dependencies (Linux only)
              if: matrix.platform == 'ubuntu-22.04'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

            # Setup Node.js
            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: lts/*

            # Enable Corepack and prepare pnpm
            - name: Enable Corepack (for pnpm)
              run: corepack enable

            - name: Prepare pnpm
              run: corepack prepare pnpm@10.14.0 --activate

            # Install Rust
            - name: Setup Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

            - name: Init public submodules
              run: |
                  git submodule update --init packages/ui-core
                  git submodule update --init packages/ui-web
                  git submodule update --init packages/types

            - name: Init private submodules
              run: |
                  git config --global url."https://${GH_PAT}:@github.com/".insteadOf "https://github.com/"
                  git submodule update --init apps/app
                  git submodule update --init packages/validators
              env:
                  GH_PAT: ${{ secrets.GH_PAT }}
              shell: bash

            # Rust cache
            - name: Rust cache
              uses: swatinem/rust-cache@v2
              with:
                  workspaces: "apps/app/src-tauri -> target"

            # Install dependencies
            - name: Install dependencies
              run: pnpm install --no-frozen-lockfile

            - name: Install Wrangler
              run: npm install -g wrangler

            # Pre-build tasks (version generator, etc.)
            - name: Run pre-build tasks
              working-directory: apps/app
              run: pnpm run ci:prebuild

            - name: Build types
              run: pnpm turbo run build --filter="./packages/types"

            - id: changelog
              run: |
                  if [ -f CHANGELOG.md ]; then
                    echo "body<<EOF" >> $GITHUB_OUTPUT
                    cat CHANGELOG.md >> $GITHUB_OUTPUT
                    echo "EOF" >> $GITHUB_OUTPUT
                  else
                    echo "body=" >> $GITHUB_OUTPUT
                  fi
              shell: bash

            # Build and release Tauri app
            - uses: tauri-apps/tauri-action@v0
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
                  APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
                  APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
                  APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
                  APPLE_ID: ${{ secrets.APPLE_ID }}
                  APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
                  APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
                  VITE_API_URL: ${{ secrets.VITE_API_URL }}
                  VITE_WS_URL: ${{ secrets.VITE_WS_URL }}
                  VITE_CDN_URL: ${{ secrets.VITE_CDN_URL }}
                  VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}
                  VITE_FOR_TAURI: true
              with:
                  tagName: __VERSION__
                  releaseName: "Mutualzz __VERSION__"
                  releaseBody: ${{ steps.changelog.outputs.body }}
                  releaseDraft: false # Set to true if testing
                  prerelease: false
                  includeRelease: true
                  includeUpdaterJson: true
                  args: ${{ matrix.args }}

            - name: Upload binaries & generate latest.json
              run: |
                  echo "Uploading binaries for ${{ matrix.platform }}"

                  BASE_DIR="./apps/app/src-tauri/target/release/bundle"
                  MACOS_DIR="./apps/app/src-tauri/target/universal-apple-darwin/release/bundle"

                  # Initialize variables
                  win_exe=""
                  osx=""
                  linux_debian=""
                  linux_rpm=""
                  linux_appimage=""

                  # WINDOWS
                  if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
                    win_exe=$(ls "$BASE_DIR/nsis/"*.exe 2>/dev/null | head -n1)

                    if [[ -f "$win_exe" ]]; then
                      mv "$win_exe" "MutualzzSetup.exe"
                      wrangler r2 object put "mutualzz/releases/latest/MutualzzSetup.exe" --file "MutualzzSetup.exe" --remote
                    fi
                  fi

                  # MACOS
                  if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
                    osx=$(ls "$MACOS_DIR/dmg/"*.dmg 2>/dev/null | head -n1)
                    if [[ -f "$osx" ]]; then
                      mv "$osx" "Mutualzz.dmg"
                      wrangler r2 object put "mutualzz/releases/latest/Mutualzz.dmg" --file "Mutualzz.dmg" --remote
                    fi
                  fi

                  # LINUX
                  if [[ "${{ matrix.platform }}" == "ubuntu-22.04" ]]; then
                    linux_debian=$(ls "$BASE_DIR/deb/"*.deb 2>/dev/null | head -n1)
                    linux_rpm=$(ls "$BASE_DIR/rpm/"*.rpm 2>/dev/null | head -n1)
                    linux_appimage=$(ls "$BASE_DIR/appimage/"*.AppImage 2>/dev/null | head -n1)

                    if [[ -f "$linux_debian" ]]; then
                      mv "$linux_debian" "Mutualzz.deb"
                      wrangler r2 object put "mutualzz/releases/latest/Mutualzz.deb" --file "Mutualzz.deb" --remote
                    fi

                    if [[ -f "$linux_rpm" ]]; then
                      mv "$linux_rpm" "Mutualzz.rpm"
                      wrangler r2 object put "mutualzz/releases/latest/Mutualzz.rpm" --file "Mutualzz.rpm"  --remote
                    fi

                    if [[ -f "$linux_appimage" ]]; then
                      mv "$linux_appimage" "Mutualzz.AppImage"
                      wrangler r2 object put "mutualzz/releases/latest/Mutualzz.AppImage" --file "Mutualzz.AppImage" --remote
                    fi
                  fi

                  # Generate latest.json
                  BASE_URL="https://proxy.mutualzz.com/releases/latest"

                  echo "Generating latest.json manifest"
                  cat <<EOF > latest.json
                  {
                    "win": "$BASE_URL/MutualzzSetup.exe",
                    "osx": "$BASE_URL/Mutualzz.dmg",
                    "linux": {
                      "debian": "$BASE_URL/Mutualzz.deb",
                      "rpm": "$BASE_URL/Mutualzz.rpm",
                      "appimage": "$BASE_URL/Mutualzz.AppImage"
                    }
                  }
                  EOF

                  wrangler r2 object put "mutualzz/releases/latest/latest.json" --file latest.json --remote

                  echo "Upload and latest.json generation complete"
              env:
                  R2_BUCKET: mutualzz
                  CLOUDFLARE_ENDPOINT: ${{ secrets.CLOUDFLARE_ENDPOINT }}
                  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
                  CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
              shell: bash
